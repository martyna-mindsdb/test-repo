name: Update Release Notes

on:
  release:
    types:
      - published  # Trigger when a new release is published

jobs:
  get-release-notes:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Fetch release notes of latest release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          # Extract the release tag from the event payload
          TAG_NAME=$(jq -r '.release.tag_name' < "$GITHUB_EVENT_PATH")
          echo "Release tag: $TAG_NAME"

          # Fetch the release data using GitHub API
          RELEASE=$(curl -s -H "Authorization: token $GITHUB_TOKEN" \
            "https://api.github.com/repos/${{ github.repository }}/releases/tags/$TAG_NAME")

          # Extract the release notes (raw body)
          RELEASE_NOTES=$(echo "$RELEASE" | jq -r '.body')

          # Update the release notes (raw body)
          UPDATED_RELEASE_NOTES="${RELEASE_NOTES}\n\nUpdated by GH Action"

          # Output the release notes to the logs
          echo "Original release notes:\n$RELEASE_NOTES"
          echo "Updated release notes:\n$UPDATED_RELEASE_NOTES"

      - name: Enhance release notes with LLM
        id: enhance_notes
        env:
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
        run: |
          # Prepare the LLM API payload
          payload=$(cat <<EOF
          {
            "model": "gpt-4",
            "messages": [
              {
                "role": "system",
                "content": "Follow the instructions to update the GitHub release notes provided below. 1. Write a section titled "TL;DR" that describes everything contained in the "What's Changed" section. Make this "TL;DR" section informative and divide information into sections of related items. 2. The input comes in the Markdown format as below. Generate the output in the Markdown format as well. 3. Final format should adhere to the following: - start with the "TL;DR" section, which is a summary of the "What's Changed" section, - follow it with the "What's Changed" section, and DO NOT change the provided "What's Changed" section, - generate a Markdown format output that concatenates these two sections."
              },
              {
                "role": "user",
                "content": "${{ env.RAW_NOTES }}"
              }
            ]
          }
          EOF
          )

          # Call the OpenAI API
          response=$(curl -s -X POST https://api.openai.com/v1/chat/completions \
            -H "Authorization: Bearer $OPENAI_API_KEY" \
            -H "Content-Type: application/json" \
            -d "$payload")

          # Extract enhanced notes from the API response
          ENHANCED_NOTES=$(echo "$response" | jq -r '.choices[0].message.content')

          if [ -z "$enhanced_notes" ]; then
            echo "LLM enhancement failed. Exiting."
            exit 1
          fi

          echo "Enhanced release notes:\n$ENHANCED_NOTES"

      - name: Update Release Notes
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          # Write enhanced notes to a file
          echo "${{ env.ENHANCED_NOTES }}" > enhanced_notes.md

          # Update the release with the enhanced notes
          gh release edit ${{ env.RELEASE_TAG }} --notes-file enhanced_notes.md
